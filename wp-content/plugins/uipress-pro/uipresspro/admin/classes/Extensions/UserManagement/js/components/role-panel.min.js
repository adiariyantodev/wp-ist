const{__:__,_x:_x,_n:_n,_nx:_nx}=wp.i18n;export default{props:{refreshTable:Function,closePanel:Function},data(){return{activeroleName:"",toggleState:!1,currentRole:this.$route.params.role,creatingNewRole:!1,role:{editData:[]},strings:{editRole:__("Edit role","uipress-lite"),details:__("Details","uipress-lite"),label:__("Label","uipress-lite"),loginRedirect:__("Login redirect","uipress-lite"),capabilities:__("Capabilities","uipress-lite"),toggleAll:__("Toggle all","uipress-lite"),addCapability:__("Add capability","uipress-lite"),addCustomCapability:__("Custom capability name","uipress-lite"),searchCapabilities:__("Search capabilities","uipress-lite"),updateRole:__("Update role","uipress-lite"),cancel:__("Cancel","uipress-lite"),name:__("Name","uipress-lite"),adminWarning:__("You are currently editing the administrator role. This is usually the most important role on the site so please make sure not to remove nessecary capabilities.","uipress-lite")},capSeach:"",activeCat:"all",allcaps:this.capabilities,customcap:"",newCap:{name:""}}},mounted(){this.getRoleData()},watch:{"role.editData.name":{handler(e,i){e&&e.length&&(this.role.editData.name=this.formatCapName(e),this.activeroleName=this.role.editData.name)},deep:!0},"newCap.name":{handler(e,i){e&&e.length&&(this.newCap.name=this.formatCapName(e))},deep:!0}},computed:{returnCapabilityTitle(){let e=this.strings.capabilities,i=this.totalAvailableCaps;return`${e} <span class="uip-text-muted uip-text-weight-normal uip-text-s">(${this.totalAssignedCaps}/${i})</span>`},totalAvailableCaps(){return this.allcaps.all.caps.length},totalAssignedCaps(){const e=this.role.editData.caps;let i=0;for(var t in e)e[t]&&i++;return i},returnToggleCapsIcon(){return this.toggleState?"select_check_box":"indeterminate_check_box"},returnSearchedCaps(){const e=this.allcaps[this.activeCat].caps,i=this.capSeach.toLowerCase();return e.filter(e=>this.maybeLowerCase(e).includes(i))}},methods:{maybeLowerCase:e=>e?e.toLowerCase():"",formatCapName:e=>(e=(e=e.replace(" ","_")).replace("-","_")).toLowerCase(),async getRoleData(){if("new"===this.currentRole)return this.handleRoleCreate();this.creatingNewRole=!0;let e=new FormData;e.append("action","uip_get_singular_role"),e.append("security",this.AjaxSecurity),e.append("role",this.currentRole);const i=await this.sendServerRequest(this.AjaxUrl,e);i.error?this.uipApp.notifications.notify(i.message,"","error"):(this.role.editData=i.role,Array.isArray(this.role.editData.caps)&&(this.role.editData.caps={}),this.activeroleName=this.role.editData.name)},handleRoleCreate(){this.creatingNewRole=!0,this.role.editData={name:"",label:"",redirect:"",caps:{}},this.uipApp.cloneRole&&(this.role.editData.caps={...this.uipApp.cloneRole.caps},this.role.editData.label=this.uipApp.cloneRole.label+" "+__("copy","uipress-lite"),this.uipApp.cloneRole=!1)},async updateRole(){let e=new FormData;e.append("action","uip_update_user_role"),e.append("security",this.AjaxSecurity),e.append("role",JSON.stringify(this.role.editData)),e.append("originalRoleName",this.activeroleName);const i=await this.sendServerRequest(this.AjaxUrl,e);i.error?this.uipApp.notifications.notify(i.message,"","error"):(this.uipApp.notifications.notify(i.message,"","success"),this.activeroleName=this.role.editData.name,this.uipApp.refreshTable(),"new"==this.$route.params.role&&this.$router.push("/roles/edit/"+this.role.editData.name))},async addCustomCap(){this.role.editData.caps[this.newCap.name]=!0;let e=new FormData;e.append("action","uip_add_custom_capability"),e.append("security",this.AjaxSecurity),e.append("role",JSON.stringify(this.role.editData)),e.append("customcap",this.newCap.name);const i=await this.sendServerRequest(this.AjaxUrl,e);i.error?this.uipApp.notifications.notify(i.message,"","error"):(this.uipApp.notifications.notify(i.message,"","success"),this.newCap.name="",this.allcaps=i.allcaps,this.$refs.newCapDrop.close(),this.uipApp.refreshTable())},toggleAllCaps(){this.allcaps.all.caps.map(e=>this.role.editData.caps[e]=this.toggleState),this.toggleState=!this.toggleState},isInCaps(e){const i=this.role.editData.caps;return!!this.isObject(i)&&(e in i&&!!i[e])},toggleCap(e){const i=this.role.editData.caps;this.isObject(i)||(this.role.editData.caps={}),this.role.editData.caps[e]=!i[e]},async removeCapability(e){if(!await this.$refs.Confirm.show({title:__("Delete capability","uipress-pro"),message:__("Are you sure you want to delete this capability? This will remove the capability sitewide. Please note not all capabilities can be deleted.","uipress-pro"),okButton:__("Delete","uipress-pro")}))return;let i=new FormData;i.append("action","uip_remove_custom_capability"),i.append("security",this.AjaxSecurity),i.append("role",JSON.stringify(this.role.editData)),i.append("customcap",e);const t=await this.sendServerRequest(this.AjaxUrl,i);t.error?this.uipApp.notifications.notify(t.message,"","error"):(this.uipApp.notifications.notify(t.message,"","success"),this.allcaps=t.allcaps,this.uipApp.refreshTable())}},template:'\n  \n      <FloatingPanel ref="rolePanel" :startOpen="true" :closer="()=>$router.push(\'/\')">\n      \n        <div class="uip-flex uip-flex-grow uip-flex-column uip-max-h-100p uip-row-gap-s uip-padding-m uip-h-100p">\n          \n          \x3c!--Header--\x3e\n          <div class="uip-flex uip-flex-column uip-row-gap-xs" >\n            \n            \x3c!-- OVERVIEW --\x3e\n            <div class="uip-flex uip-flex-center uip-gap-s">\n              \n              <div class="uip-flex uip-flex-column uip-flex-grow">\n                <div class="uip-text-bold uip-text-l uip-text-emphasis">{{strings.editRole}}</div>\n                <div class="uip-text-muted uip-max-w-250 uip-overflow-hidden uip-no-wrap uip-text-ellipsis">{{role.editData.label}}</div>\n              </div>\n              \n              <div class="uip-flex uip-text-l uip-self-flex-start">\n                \n                <a @click="$router.push(\'/\');$refs.rolePanel.close()" class="uip-link-muted hover:uip-background-muted uip-border-rounder uip-icon uip-padding-xxs">close</a>\n                \n              </div>\n            </div>\n            \n          </div>\n          \n          <div v-if="role.editData.name == \'administrator\'" class="uip-background-orange-wash uip-padding-xs uip-border-rounder">\n            {{strings.adminWarning}}\n          </div>\n          \n          \x3c!--Spacer--\x3e\n          <div></div>\n          \n          \x3c!--Role details--\x3e\n          <ToggleSection :title="strings.details" :startOpen="true">\n          \n            <div class="uip-grid-col-1-3">\n            \n            \n              \n              <div v-if="creatingNewRole" class="uip-text-muted uip-flex uip-flex-center uip-gap-xs">\n                <span>{{strings.name}}</span>\n              </div>\n              <input v-if="creatingNewRole" type="text" class="uip-input uip-w-100p" v-model="role.editData.name">\n            \n              <div class="uip-text-muted uip-flex uip-flex-center uip-gap-xs">\n                <span>{{strings.label}}</span>\n              </div>\n              <input type="text" class="uip-input uip-w-100p" v-model="role.editData.label">\n              \n              <div class="uip-text-muted uip-flex uip-flex-center uip-gap-xs">\n                <span>{{strings.loginRedirect}}</span>\n              </div>\n              <input placeholder="index.php" \n              type="text" class="uip-input" v-model="role.editData.redirect">\n            \n            </div>\n            \n          </ToggleSection>  \n          \n          \n          \x3c!--Spacer--\x3e\n          <div class="uip-border-top"></div>\n          \n          \n          \x3c!--Capabilities--\x3e\n          <ToggleSection :title="returnCapabilityTitle" :startOpen="true">\n          \n          \n            <div class="uip-grid-col-1-3">\n            \n              \x3c!--Categories--\x3e\n              <div class="uip-flex uip-flex-column uip-row-gap-xs">\n              \n                <template v-for="cat in allcaps">\n                  <div class="uip-flex uip-flex-row uip-gap-xxs uip-flex-center uip-link-muted uip-text-s" \n                  :class="{\'uip-text-bold uip-text-emphasis\' : activeCat == cat.shortname}" @click="activeCat = cat.shortname">\n                    <div class="">{{cat.name}}</div>\n                  </div>\n                </template>\n                \n              </div>\n              \n              \n              \x3c!-- caps --\x3e\n              <div class="uip-flex-grow uip-flex uip-flex-column uip-row-gap-xxs">\n              \n                <div class="uip-flex uip-gap-xxs uip-margin-bottom-xs">\n                \n                  <div class="uip-background-muted uip-padding-xxs uip-border-rounder uip-flex uip-flex-center uip-gap-xxs uip-flex-grow">\n                    <span class="uip-icon">search</span>\n                    <input class="uip-blank-input uip-flex-grow uip-text-s" :placeholder="strings.searchCapabilities" v-model="capSeach">\n                  </div>\n                  \n                  <button @click="toggleAllCaps()" :title="strings.toggleAll" class="uip-flex uip-flex-row uip-gap-xxs uip-flex-center uip-border-rounder uip-button-default uip-text-s uip-padding-xs">\n                    <span class="uip-icon">{{returnToggleCapsIcon}}</span>\n                  </button>\n                  \n                  \x3c!--New cap--\x3e\n                  <dropdown pos="bottom right" ref="newCapDrop">\n                    <template #trigger>\n                      <button class="uip-flex uip-flex-row uip-gap-xxs uip-flex-center uip-border-rounder uip-button-default uip-text-s uip-padding-xs">\n                        <span class="uip-icon">add</span>\n                      </button>\n                    </template>\n                    <template #content>\n                        <div class="uip-flex uip-flex-column uip-row-gap-s uip-padding-s">\n                          \n                          <input :placeholder="strings.addCustomCapability" class="uip-input-small uip-w-100p" type="text" v-model="newCap.name">\n                                                      \n                          <button class="uip-button-primary uip-border-rounder uip-text-s" @click="addCustomCap()">{{strings.addCapability}}</button>\n                        </div>\n                    </template>\n                    \n                   \n                    \n                  </dropdown>\n                \n                </div>\n                \n                <div class="uip-flex uip-flex-column uip-row-gap-xxs uip-max-h-300 uip-overflow-auto">\n                  <template v-for="cap in returnSearchedCaps">\n                  \n                    <div class="uip-flex uip-flex-center uip-gap-s uip-background-muted uip-border-rounder uip-cursor-pointer uip-padding-xxs">\n                      <div class="uip-flex uip-flex-row uip-gap-xs uip-flex-center uip-border-round uip-cursor-pointer uip-flex-grow" @click="toggleCap(cap)">\n                        <div v-if="isInCaps(cap)" class="uip-icon uip-text-accent">radio_button_checked</div>\n                        <div v-if="!isInCaps(cap)" class="uip-icon" >radio_button_unchecked</div>\n                        <div class="uip-flex-grow uip-text-s uip-overflow-hidden uip-text-ellipsis uip-no-wrap">{{cap}}</div>\n                      </div>\n                      <div class="uip-icon uip-link-muted" @click="removeCapability(cap)">close</div>\n                    </div>\n                    \n                  </template>\n                </div>\n                \n              </div>\n              \n            </div>  \n          \n          </ToggleSection>\n          \n          \n          \n          \x3c!--Spacer--\x3e\n          <div class="uip-border-top"></div>\n          \n          \n          <div class="uip-flex-grow uip-flex uip-flex-column" style="justify-content: end;">\n            <div class="uip-flex uip-flex-between uip-gap-s">\n              <router-link :to="\'/\'" class="uip-button-default uip-no-underline uip-flex-grow uip-text-center">{{strings.cancel}}</router-link>\n              <button class="uip-button-primary uip-flex-grow" @click="updateRole()">{{strings.updateRole}}</button>\n            </div>\n          </div>\n          \n        </div>    \n        \n        \n        \n        \n        <Confirm ref="Confirm"/>\n      \n      </FloatingPanel>\n      \n      \n      '};