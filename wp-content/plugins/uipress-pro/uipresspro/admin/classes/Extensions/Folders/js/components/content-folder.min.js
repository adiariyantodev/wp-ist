const{__:__,_x:_x,_n:_n,_nx:_nx}=wp.i18n;export default{name:"content-folder",props:{folder:Object,removeSelf:Function,updateID:Function},data:()=>({loading:!1,open:!1,counter:0,strings:{placeholder:__("Input placeholder...","uipress-pro"),new:__("New","uipress-pro"),loadMore:__("Load more","uipress-pro"),search:__("Search","uipress-pro"),view:__("View","uipress-pro"),editFolder:__("Edit folder","uipress-pro"),deleteFolder:__("Delete folder","uipress-pro"),folders:__("Folders","uipress-pro"),duplicate:__("Duplicate","uipress-pro"),folderName:__("Folder name","uipress-pro"),folderColor:__("Folder colour","uipress-pro"),update:__("Update","uipress-pro"),edit:__("Edit","uipress-pro"),updateFolder:__("Update folder","uipress-pro"),newFolder:__("New folder","uipress-pro")}}),computed:{requestNewFolderScreen(){return{component:"NewFolder",label:this.strings.newFolder,list:this.folder.content,parent:this.folder.id}},requestUpdateFolderScreen(){return{component:"UpdateFolder",label:this.strings.updateFolder,folder:this.folder,returnData:e=>{this.folder.title=e.title,this.folder.color=e.color,this.$emit("go-back")}}}},beforeUnmount(){document.removeEventListener(`uipress/folders/${this.folder.id}/content/removed`,this.handleItemRemoved)},mounted(){document.addEventListener(`uipress/folders/${this.folder.id}/content/removed`,this.handleItemRemoved)},methods:{handleItemRemoved(e){const t=e.detail.removedCount;this.folder.count=this.folder.count-t},async getFolderContent(e){e&&(this.folder.loading=!0);let t=new FormData;t.append("action","uip_folders_get_folder_content"),t.append("security",this.AjaxSecurity),t.append("limitToAuthor",this.limitToAuthor),t.append("postType",this.postType),t.append("id",this.folder.id),t.append("limitToType",this.limitToType);const n=await this.sendServerRequest(this.AjaxUrl,t);this.folder.loading=!1,n.error?this.uipApp.notifications.notify(n.message,"","error",!0):(this.folder.totalFound=n.totalFound,this.folder.count=n.folderCount,this.folder.content=n.content)},async deleteFolder(){let e=new FormData;e.append("action","uip_folders_delete_folder"),e.append("security",this.AjaxSecurity),e.append("postType",this.postType),e.append("folderId",this.folder.id);const t=await this.sendServerRequest(this.AjaxUrl,e);this.folder.loading=!1,t.error&&this.uipApp.notifications.notify(t.message,"","error",!0),t.success&&(this.removeSelf(this.folder.id),this.uipApp.notifications.notify(__("Folder deleted","uipress-pro"),"","success",!0))},addDropClass(e){e.preventDefault(),e.currentTarget.classList.add("uip-background-muted"),this.counter++},removeDropClass(e,t){if(e.preventDefault(),this.counter--,0===this.counter){e.currentTarget.classList.remove("uip-background-muted")}},finishDrag(e){e.preventDefault(),e.currentTarget.classList.remove("uip-background-muted"),this.folderMove.showRemoveFromFolder=!1},setFolderDataTransfer(e){e.dataTransfer.setData("itemID",JSON.stringify([this.folder.id])),e.dataTransfer.setData("parentFolder",this.folder.parent)},async addToFolder(e,t){this.finishDrag(e);let n=e.dataTransfer.getData("itemID");if(!n)return;if((n=JSON.parse(n)).length<1)return;const r=e.dataTransfer.getData("parentFolder");let i=new FormData;i.append("action","uip_folders_add_item_to_folder"),i.append("security",this.AjaxSecurity),i.append("IDS",JSON.stringify(n)),i.append("newParent",this.folder.id),i.append("parentFolder",r),i.append("postType",this.postType),i.append("limitToType",this.limitToType);const o=await this.sendServerRequest(this.AjaxUrl,i);this.folder.loading=!1,o.error?this.uipApp.notifications.notify(o.message,"","error",!0):(this.folder.count+=n.length,this.uipApp.notifications.notify(o.message,"","success",!0))},deleteFromList(e){const t=this.folder.content.findIndex(t=>t.id===e);t<0||this.folder.content.splice(t,1)}},template:'\n  \n  \n      <div :data-id="folder.id" :data-parent-folder="folder.parent" class="uip-folder">\n      \n        <div @contextmenu.prevent="$refs.folderOptions.show($event)" class="uip-flex uip-gap-xs uip-flex-center uip-text-s uip-padding-xxs uip-border-rounder" \n        @click="open=true;getFolderContent(true);activeFolder.id = folder.id"\n        :class="activeFolder.id === folder.id ? \'uip-background-muted uip-text-emphasis\' : \'hover:uip-background-muted uip-link-default\'"\n        @drop.prevent.stop="addToFolder($event)" \n        @dragenter="addDropClass($event, folder)"\n        @dragleave="removeDropClass($event, folder)"\n        @dragenter.prevent @dragover.prevent>\n          \n          <div @click.prevent.stop="open = !open;getFolderContent(true)" class="uip-link-muted">\n            <div class="uip-icon" v-if="!open">chevron_right</div>\n            <div class="uip-icon" v-if="open">expand_more</div>\n          </div>\n          \n          <div class="uip-w-8 uip-ratio-1-1" :style="\'border-radius:3px;background:\' + folder.color"></div>\n          \n          <div class="uip-flex-grow">{{folder.title}}</div>\n          \n          <div class="uip-text-muted uip-padding-right-xxs">{{folder.count}}</div>\n          \n          <ContextMenu ref="folderOptions">\n            \n            <div class="uip-padding-xs uip-flex uip-flex-column uip-text-weight-normal uip-w-160" style="text-size:15px">\n              \n              <a @click="$emit(\'request-screen\', requestNewFolderScreen);$refs.folderOptions.close()"\n              class="uip-link-default uip-padding-xxs uip-border-rounder hover:uip-background-muted uip-no-underline uip-flex uip-flex-center uip-flex-between uip-gap-s uip-text-s">\n                <span class="">{{strings.newFolder}}</span>\n                <span class="uip-icon">add</span>\n              </a>\n              \n              <a @click="$emit(\'request-screen\', requestUpdateFolderScreen);$refs.folderOptions.close()"\n              class="uip-link-default uip-padding-xxs uip-border-rounder hover:uip-background-muted uip-no-underline uip-flex uip-flex-center uip-flex-between uip-gap-s uip-text-s">\n                <span class="">{{strings.editFolder}}</span>\n                <span class="uip-icon">edit</span>\n              </a>\n              \n            \n              <a @click="deleteFolder();$refs.folderOptions.close()"\n              class="uip-link-danger uip-padding-xxs uip-border-rounder hover:uip-background-muted uip-no-underline uip-flex uip-flex-center uip-flex-between uip-gap-s uip-text-s">\n                <span class="">{{strings.deleteFolder}}</span>\n                <span class="uip-icon">delete</span>\n              </a>\n            \n            </div>\n            \n          </ContextMenu>\n        \n        </div>\n        \n        <uipDraggable v-if="open"\n        class="uip-flex uip-flex-column uip-max-w-100p uip-margin-left-s uip-margin-top-xxs uip-min-h-18"\n        :group="{ name: \'uip-folders\', pull: true, put: true }" \n        :list="folder.content"\n        @change="(evt) => folderMove.handler(evt, folder)"\n        ghostClass="uip-canvas-ghost"\n        animation="300"\n        :sort="false">\n        \n          <template v-for="(subfolder, index) in folder.content" \n          :key="subfolder.id" :index="index">\n          \n            <content-folder @go-back="$emit(\'go-back\')" \n            @request-screen="(d)=> $emit(\'request-screen\', d)" :folder="subfolder" :removeSelf="(id)=>{deleteFromList(id)}"/>\n          \n          </template>\n        \n        </uipDraggable>\n      \n      \n      </div>\n      \n     \n      \n      \n      \n      '};