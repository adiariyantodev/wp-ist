const{__:__,_x:_x,_n:_n,_nx:_nx}=wp.i18n,MenuItem={name:"MenuItem",props:{menuItem:{type:Object,default:{}},submenu:{type:Object,default:{}},topLevel:{type:Boolean,default:!1},index:{type:Number,default:0},depth:{type:Number,default:0},list:{type:Array,default:[]}},data:()=>({open:!1,hover:!1}),async mounted(){await this.$nextTick()},computed:{returnMenuLinks(){return[{label:__("Edit","uipress-pro"),icon:"edit",action:()=>{this.requestEditScreen()}},{label:__("Duplicate","uipress-pro"),icon:"content_copy",action:()=>{const e={...this.menuItem};this.list.splice(this.index,0,e)}},{name:"divider"},{label:__("Delete","uipress-pro"),icon:"delete",danger:!0,action:()=>{this.list.splice(this.index,1)}}]},returnChevronIcon(){return this.isSeparator?"remove":this.open?"expand_more":"chevron_right"},returnItemSubmenu(){if(this.topLevel){let e=this.menuItem[2]?this.menuItem[2]:this.menuItem.uip_uid;return e=this.switchOutHtmlEntities(e),this.submenu[e]||(this.submenu[e]=[]),this.submenu[e]}if(!this.topLevel)return Array.isArray(this.menuItem.submenu)||(this.menuItem.submenu=[]),this.menuItem.submenu},isSeparator(){return"sep"==this.menuItem.type},returnItemName(){return this.isSeparator?__("Separator","uipress-pro"):this.menuItem.custom.name?this.menuItem.custom.name:this.menuItem.cleanName},returnCustomIcon(){return!!this.menuItem.custom.icon&&this.menuItem.custom.icon},returnVisibilityIcon(){return this.menuItem.custom.hidden?"visibility_off":"visibility"}},methods:{switchOutHtmlEntities(e){if("string"!=typeof e)return e;let n=document.createElement("textarea");n.innerHTML=e;let t=n.value;return n.remove(),t},requestEditScreen(){const e=this.isSeparator?__("separator","uipress-pro"):this.menuItem.cleanName,n={component:"ItemEditor",menuItem:this.menuItem,label:__("Edit","uipress-pro")+" "+e,returnData:e=>{this.menuItem.custom={...e}}};this.$emit("request-screen",n)}},template:'\n          <div class="uip-flex uip-flex-column uip-row-gap-xs">\n          \n            <div @dblclick.prevent.stop="requestEditScreen()"\n            @mouseenter="hover = true" @mouseleave="hover = false"\n            @contextmenu.prevent.stop="$refs.contextMenu.show($event)"\n            class="uip-flex uip-gap-xs uip-flex-center uip-link-emphasis uip-padding-xxs uip-border-rounder hover:uip-background-muted uip-transition-all" @click="open = !open">\n            \n              <div class="uip-icon uip-text-muted">{{ returnChevronIcon }}</div>\n              \n              <div class="uip-icon" v-if="returnCustomIcon">{{ returnCustomIcon }}</div>\n              <div class="uip-flex-grow" :class="{\'uip-text-muted\' : isSeparator, \'uip-opacity-20\' : menuItem.custom.hidden}">{{returnItemName}}</div>\n              \n              <div @click.prevent.stop="menuItem.custom.hidden = !menuItem.custom.hidden" class="uip-icon uip-link-default" v-if="hover">{{returnVisibilityIcon}}</div>\n              <div @click.prevent.stop="$refs.contextMenu.show($event)" class="uip-icon uip-link-default">more_vert</div>\n            \n            </div>\n            \n            <div v-if="open && returnItemSubmenu && !isSeparator" class="uip-margin-left-s">\n            \n              <uipDraggable \n              class="uip-flex uip-flex-column uip-row-gap-xxxs uip-max-w-100p uip-min-h-18" \n              :group="{ name: \'uip-menu-items\', pull: true, put: true }" \n              :list="returnItemSubmenu"\n              ghostClass="uip-canvas-ghost"\n              animation="300"\n              :sort="true">\n              \n                <template v-for="(menu, index) in returnItemSubmenu" :key="index" :index="index">\n                  \n                  <MenuItem :depth="depth + 1"\n                  @request-screen="(e)=>$emit(\'request-screen\', e)"\n                  @go-back="(e)=>$emit(\'go-back\', e)"\n                  :menuItem="menu" :topLevel="false" :submenu="submenu" :index="index" :list="returnItemSubmenu"/>\n                \n                </template>\n              \n              </uipDraggable>\n            \n            \n            </div>\n            \n            <ContextMenu ref="contextMenu">\n            \n              <div class="uip-padding-xs uip-flex uip-flex-column uip-text-weight-normal uip-text-s">\n              \n                <template v-for="item in returnMenuLinks">\n                \n                  <div v-if="item.name == \'divider\'" class="uip-border-top uip-margin-top-xxs uip-margin-bottom-xxs"></div>\n                  \n                  <a v-else\n                  @click.prevent="item.action();$refs.contextMenu.close()"\n                  class="uip-link-default uip-padding-xxs uip-border-rounder hover:uip-background-muted uip-no-underline uip-flex uip-flex-center uip-flex-between uip-gap-s"\n                  :class="{ \'uip-link-danger\' : item.danger }">\n                  \n                    <span class="">{{item.label}}</span>\n                    \n                    <span v-if="item.icon" class="uip-flex-no-shrink uip-icon" \n                    :class="{ \'uip-link-muted\' : !item.danger }">{{item.icon}}</span>\n                    \n                   </a>\n                </template>\n               \n              </div>   \n            \n            </contextMenu>\n          \n          \n          </div>\n  '},ToggleSection={props:{title:String,startOpen:Boolean},data:()=>({open:!1}),mounted(){this.startOpen&&(this.open=!0)},computed:{returnVisibilityIcon(){return this.open?"expand_more":"chevron_left"}},methods:{toggleVisibility(){this.open=!this.open}},template:'\n  \n    <div class="uip-flex uip-flex-column uip-row-gap-s">\n    \n      \x3c!-- Title --\x3e\n      <div class="uip-flex uip-gap-s uip-flex-center uip-flex-between">\n        \n       \n        <div class="uip-flex uip-gap-xxs uip-flex-center uip-cursor-pointer uip-flex-between uip-flex-grow"\n        @click="toggleVisibility()">\n          \n          \n          <span class="uip-text-bold uip-text-emphasis">{{ title }}</span> \n          \n          <a class="uip-link-default uip-icon">{{ returnVisibilityIcon }}</a>\n          \n          \n        </div>\n      \n      </div>\n      \n      <div v-if="open" class="uip-padding-left-s">\n        <slot></slot>\n      </div>\n      \n    </div>\n  \n  '};export default{components:{MenuItem:MenuItem,ToggleSection:ToggleSection},props:{adminMenu:{type:Array},submenu:{type:Object,default:[]},menuObject:Object,resetMenuToDefault:Function},data:()=>({rendered:!1,topLevelItems:[],activePanel:"menuItems",strings:{settings:__("Settings","uipress-pro"),menu:__("Menu","uipress-pro"),name:__("Name","uipress-pro"),active:__("Active","uipress-pro"),for:__("For","uipress-pro"),excludes:__("Excludes","uipress-pro"),newMenuItem:__("New menu item","uipress-pro"),applyToSubsites:__("Apply to subsites","uipress-pro")},panels:{menuItems:{value:"menuItems",label:__("Menu items","uipress-pro")},settings:{value:"settings",label:__("Settings","uipress-pro")}},activeOptions:{false:{value:!1,label:__("Disabled","uipress-pro")},true:{value:!0,label:__("Enabled","uipress-pro")}}}),async mounted(){await this.$nextTick(),this.rendered=!0},methods:{resetMenu(){this.resetMenuToDefault()},cloneItem(e){const n=e[2]?this.switchOutHtmlEntities(e[2]):e.uip_uid;let t=this.submenu[n]&&Array.isArray(this.submenu[n])?this.submenu[n]:[];return e.submenu=t,e},switchOutHtmlEntities(e){if("string"!=typeof e)return e;let n=document.createElement("textarea");n.innerHTML=e;let t=n.value;return n.remove(),t}},template:'\n    <div class="uip-flex uip-flex-column uip-row-gap-s uip-position-relative uip-h-100p uip-margin-top-s">\n      \n      <ToggleSection :title="strings.settings" :startOpen="true">\n      \n      \n        <div class="uip-grid-col-1-3">\n        \n          <div class="uip-text-muted uip-flex uip-flex-center uip-text-s"><span>{{strings.name}}</span></div>\n          <input class="uip-input uip-input-small" type="text" v-model="menuObject.name">\n          \n          <div class="uip-text-muted uip-flex uip-flex-center uip-text-s"><span>{{strings.active}}</span></div>\n          <switch-select :options="activeOptions" \n          :activeValue="menuObject.status" \n          :returnValue="(d)=>(menuObject.status=d)"/>\n          \n          <template v-if="isPrimarySite && isMultisite">\n            <div class="uip-text-muted uip-flex uip-flex-center uip-text-s"><span>{{strings.applyToSubsites}}</span></div>\n            <switch-select :options="activeOptions" \n            :activeValue="menuObject.multisite" \n            :returnValue="(d)=>(menuObject.multisite=d)"/>\n          </template>\n          \n          <div class="uip-text-muted uip-flex uip-flex-center uip-text-s"><span>{{strings.for}}</span></div>\n          <user-role-select :selected="menuObject.for"\n          @click.stop\n          :placeHolder="strings.for"\n          :updateSelected="(d)=>{menuObject.for = d}"/>\n          \n          <div class="uip-text-muted uip-flex uip-flex-center uip-text-s"><span>{{strings.excludes}}</span></div>\n          <user-role-select :selected="menuObject.excludes"\n          @click.stop\n          :placeHolder="strings.excludes"\n          :updateSelected="(d)=>{menuObject.excludes = d}"/>\n        \n        </div>\n        \n      \n      </ToggleSection>\n      \n      <div class="uip-border-top"></div>\n      \n      <div class="uip-flex uip-gap-xs uip-flex-center uip-cursor-pointer uip-flex-between">\n        \n        <span class="uip-text-bold uip-text-emphasis uip-flex-grow">{{ strings.menu }}</span> \n        \n        <a class="uip-link-default uip-icon uip-text-l" @click="resetMenu()">restart_alt</a>\n        \n        <dropdown pos="left center" :snapX="[\'#uip-block-settings\']" ref="newMenuItem">\n          <template #trigger>\n            <a class="uip-link-default uip-icon uip-text-l">add</a>\n          </template>\n          <template #content>\n            \n            <div class="uip-padding-s uip-flex uip-flex-column uip-row-gap-s uip-w-260">\n              \n              <div class="uip-flex uip-flex-between uip-flex-center">\n                <div class="uip-text-emphasis uip-text-bold uip-text-s">{{strings.newMenuItem}}</div>\n                <div @click="$refs.newMenuItem.close()" class="uip-flex uip-flex-center uip-flex-middle uip-padding-xxs uip-link-muted hover:uip-background-muted uip-border-rounder">\n                  <span class="uip-icon">close</span>\n                </div>\n              </div>\n              \n              <NewMenuItems/>\n              \n            </div>\n            \n          </template>\n        </dropdown>\n        \n      </div>  \n      \n      <uipDraggable v-if="rendered"\n      class="uip-flex uip-flex-column uip-row-gap-xxs uip-max-w-100p uip-flex-grow uip-padding-left-s" \n      :group="{ name: \'uip-menu-items\', pull: true, put: true }" \n      :list="adminMenu"\n      ghostClass="uip-canvas-ghost"\n      animation="300"\n      :clone="cloneItem"\n      :sort="true">\n      \n        <template v-for="(menu, index) in adminMenu" :key="index" :index="index">\n          \n          <MenuItem \n          @request-screen="(e)=>$emit(\'request-screen\', e)"\n          @go-back="(e)=>$emit(\'go-back\', e)"\n          :menuItem="menu" :topLevel="true" :submenu="submenu" :index="index" :list="adminMenu"/>\n        \n        </template>\n      \n      </uipDraggable>\n      \n      \n      \n    </div>\n  '};