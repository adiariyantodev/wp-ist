const{__:__,_x:_x,_n:_n,_nx:_nx}=wp.i18n;export default{props:{returnData:Function,value:Object},data:()=>({adminMenu:null,strings:{saveMenu:__("Save menu","uipress-lite"),importMenu:__("Import menu","uipress-lite")}}),computed:{hasAdminMenu(){return!(!this.adminMenu||!this.isObject(this.adminMenu))&&("menu"in this.adminMenu&&"menu"in this.adminMenu.menu)},returnMenuEditorScreen(){return{component:"CustomMenuBuilder",adminMenu:this.adminMenu.menu.menu,submenu:this.adminMenu.menu.submenu,label:this.adminMenu.name,menuObject:this.adminMenu,resetMenuToDefault:this.resetMenuToDefault}}},methods:{async show(e,n){this.adminMenu={...e},this.maybeInjectDefaults(),await this.$nextTick(),this.saveMenu=n,this.$refs.panel.show()},maybeInjectDefaults(){"menu"in this.adminMenu||(this.adminMenu.menu={menu:[...this.uipGlobalMenu.menu],submenu:{...this.uipGlobalMenu.submenu}})},returnMenu(){this.saveMenu(this.adminMenu)},resetMenuToDefault(){this.adminMenu.menu.menu=[...[],...this.uipGlobalMenu.menu],this.adminMenu.menu.submenu={...{},...this.uipGlobalMenu.submenu}},importMenu(e){const n=e.currentTarget.files[0];if(!n)return;const i=this.uipApp.notifications.notify(__("Importing menu","uipress-pro"),"","default",!1,!0),t=e=>{this.uipApp.notifications.notify(e,"","error",!0,!1),this.uipApp.notifications.remove(i)};if("application/json"!=n.type)return t(__("Import file must be in valid JSON format","uipresss-pro"));if(n.size>1e6)return t(__("Uploaded file is too big","uipresss-pro"));const u=new FileReader;u.onload=(async e=>{const n=e.target.result;let u;try{u=JSON.parse(n)}catch(e){return t(e)}if(!u)return t(__("JSON parsing failed","uipress-pro"));if(!("uipmenus"in u))return t(__("Template is not valid","uipress-pro"));if(!Array.isArray(u.uipmenus))return t(__("Template is not valid","uipress-pro"));const s=u.uipmenus[0];if(!s)return;const r=this.adminMenu.id;this.adminMenu={...s},this.adminMenu.id=r,this.uipApp.notifications.remove(i),this.uipApp.notifications.notify(__("Menu imported","uipress-pro"),"","success",!0,!1)}),u.readAsText(n,"UTF-8"),this.uipApp.notifications.remove(i)}},template:'\n  \n  <FloatingPanel ref="panel">\n  \n    <div class="uip-flex uip-flex-column uip-row-gap-m uip-padding-m uip-h-100p" id="uip-block-settings" style="overflow:hidden;max-height:100%">\n      \n      <ScreenControl :closer="$refs.panel.close" :startScreen="returnMenuEditorScreen" :homeScreen="returnMenuEditorScreen.component" :showNavigation="true"\n      class="uip-flex-grow" style="overflow:auto"\n      :largeNavigation="true">\n       \n        <template #componenthandler="{ processScreen, currentScreen, goBack }">\n            <KeepAlive>\n              <component @request-screen="(d)=>{processScreen(d)}" @go-back="goBack()"\n              v-bind="currentScreen"\n              :is="currentScreen.component"/>\n            </KeepAlive>\n        </template>\n        \n      </ScreenControl>\n        \n        \n      <div class="uip-flex uip-flex-between uip-gap-s">  \n      \n        <label class="uip-button-default uip-flex-grow uip-text-center">\n          <input class="uip-hidden" type="file" @change="importMenu" accept=".json">\n          {{strings.importMenu}}\n        </label>\n        \n        <button @click="returnMenu" class="uip-button-primary uip-flex-grow">\n          {{strings.saveMenu}}\n        </button>\n      \n      </div>\n      \n    </div>\n    \n  </FloatingPanel>\n  '};