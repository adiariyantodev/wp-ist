import AnalyticsDummyData from"./analytics-dummy-data.min.js";const reactive=window.uipress.reactive,{__:__,_x:_x,_n:_n,_nx:_nx}=wp.i18n;export default{data:()=>({ready:!1,hasAccount:!1,hasLicence:!1,queryURL:!1,reportRunning:!1,token:!1,saveAccountToUser:!1,cache:{},queue:[],dev:!1}),inject:["uiTemplate"],watch:{ready:{handler(e,t){this.uipApp.googleAnalytics.ready=this.returnStatus},deep:!0},"uiTemplate.globalSettings.options.analytics.saveAccountToUser":{handler(e,t){this.getQueryURL()}}},async mounted(){await this.$nextTick(),this.createQueue(),this.pushToGlobal()},computed:{returnStatus(){return this.ready},returnAccountOnUser(){return void 0!==this.uiTemplate.globalSettings.options&&this.hasNestedPath(this.uiTemplate,"globalSettings","options","analytics","saveAccountToUser")}},methods:{createQueue(){this.queue=((e,t)=>{const a=[],s=()=>{a[0]&&a[0]().then(function(e){return e}).catch(t).then(()=>a.shift()).then(s).then()};return async e=>{if(a.push(e),1===a.length)return new Promise((e,t)=>{s()})}})()},async pushToGlobal(){this.uipApp.googleAnalytics={api:this.uipAnalytics,ready:this.returnStatus},await this.$nextTick(),this.ready=!0},async uipAnalytics(e,t,a){if(this.queryURL||await this.getQueryURL(),"refresh"==e)return await new Promise((e,t)=>{this.getQueryURL(e)});if(!this.hasAccount){let e={error:!0};return e.message=__("No google account connected","uipress-pro"),e.type="no_account",e}if(!this.hasLicence){let e={error:!0};return e.message=__("No pro licence found. Please add a valid pro licence to use google analytics","uipress-pro"),e.type="no_licence",e}if("get"==e){const e=this.getDates(t,a),s=(e,t)=>new Promise((a,s)=>this.runReport(e,a,t));return await new Promise((t,a)=>{this.queue(()=>s(e,t))})}return"removeAccount"==e?await new Promise((e,t)=>{this.removeAnalyticsAccount(e)}):void 0},async getQueryURL(e){this.cache={},console.log("running"),this.saveAccountToUser=this.returnAccountOnUser,this.hasAccount=!1,this.hasLicence=!1,this.ready=!1,this.queryURL=!1;let t=new FormData;t.append("action","uip_build_google_analytics_query"),t.append("security",uip_ajax.security),t.append("saveAccountToUser",this.saveAccountToUser);const a=await this.sendServerRequest(uip_ajax.ajax_url,t);return this.ready=!0,this.uipApp.googleAnalytics.ready=!0,a.error?("no_google"==a.error_type&&(this.hasAccount=!1,this.queryURL="no_google"),"no_licence"==a.error_type&&(this.hasLicence=!1,this.queryURL="no_licence"),void 0!==e&&(e(!1),this.queryURL="undefined"),!1):(this.hasAccount=!0,this.hasLicence=!0,this.queryURL=a.url,void 0!==e&&e(!0),!0)},async runReport(e,t,a){let s=`&sd=${e.startDate}&ed=${e.endDate}&sdc=${e.startDateCom}&edc=${e.endDateCom}`,n=this.queryURL+s;if(this.cache[e.startDate+e.endDate])return t(!0),void a(this.cache[e.startDate+e.endDate]);this.reportRunning=!0;let i=new FormData;if("prod"!=this.uiTemplate.display)return t(!0),void a(JSON.parse(AnalyticsDummyData));const r=await this.sendServerRequest(n,i);if(this.reportRunning=!1,r.error){const e=r.message,s=__("Unable to fetch analytic data");this.uipApp.notifications.notify(s,e,"error",!0,!1),t(!0),a(r)}r.access_token&&this.saveToken(r.access_token),this.cache[e.startDate+e.endDate]=r,t(!0),a(r)},async saveToken(e){if(!e||e==this.token)return;let t=new FormData;t.append("action","uip_save_access_token"),t.append("security",uip_ajax.security),t.append("token",e),t.append("saveAccountToUser",this.saveAccountToUser);const a=await this.sendServerRequest(uip_ajax.ajax_url,t);a.error?this.uipApp.notifications.notify(a.message,"","error",!0,!1):this.token=e},getDates(e,t){let a=this.daysDifference(e,t),s={};return s.startDate=this.returnFormattedDate(e),s.endDate=this.returnFormattedDate(t),e.setDate(e.getDate()-1),s.endDateCom=this.returnFormattedDate(e),e.setDate(e.getDate()-a),s.startDateCom=this.returnFormattedDate(e),s},returnFormattedDate(e){let t=e.getMonth()+1,a=e.getDate(),s=e.getFullYear();return t<10&&(t="0"+t),a<10&&(a="0"+a),s+"-"+t+"-"+a},daysDifference(e,t){const a=t.getTime()-e.getTime();return Math.round(a/864e5)+1},async removeAnalyticsAccount(e){let t=new FormData;t.append("action","uip_remove_analytics_account"),t.append("security",uip_ajax.security),t.append("saveAccountToUser",this.saveAccountToUser);const a=await this.sendServerRequest(uip_ajax.ajax_url,t);if(a.error)return this.uipApp.notifications.notify(a.message,"","error",!0,!1),void e(!1);this.getQueryURL(),e(!0)}},template:" "};