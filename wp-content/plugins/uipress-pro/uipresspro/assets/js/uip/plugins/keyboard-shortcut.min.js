const{__:__,_x:_x,_n:_n,_nx:_nx}=wp.i18n;export default{props:{returnData:Function,value:Object,args:Object},data:()=>({option:{enabled:!1,display:!1,selected:[]},enabledOptions:{false:{value:!1,label:__("Disabled","uipress-pro")},true:{value:!0,label:__("Enabled","uipress-pro")}},showHide:{false:{value:!1,label:__("Hide","uipress-pro")},true:{value:!0,label:__("Show","uipress-pro")}},strings:{shortCutEnabled:__("Enable keybaord shortcut?","uipress-lite"),pressShortcut:__("Type your custom shortcut below","uipress-lite"),displayShortcut:__("Display shortcut in trigger","uipress-lite")},isCtrlPressed:!1,isAltPressed:!1,isShiftPressed:!1,shortcutKeys:["Enter"," ","ArrowLeft","ArrowUp","ArrowRight","ArrowDown"],shortcutKeysIcons:[{key:"Enter",icon:"keyboard_return"},{key:" ",icon:"space_bar"},{key:"ArrowLeft",icon:"keyboard_arrow_left"},{key:"ArrowUp",icon:"keyboard_arrow_up"},{key:"ArrowRight",icon:"keyboard_arrow_right"},{key:"ArrowDown",icon:"keyboard_arrow_down"}],selected:[]}),watch:{option:{handler(e,t){this.returnData(this.option)},deep:!0}},mounted(){this.formatValue()},methods:{formatValue(e){this.value&&this.isObject(this.value)&&(this.option={...this.option,...this.value})},logKeyDown(e){const t=e.key;this.pushSelected(t)},logKeyUp(e){e.preventDefault(),this.selected=[];var t=e.keyCode?e.keyCode:e.which;t>=16&&t<=18&&this.updateKeyFlags(t,!1),(e.ctrlKey||e.metaKey)&&this.updateKeyFlags(17,!1)},pushSelected(e){this.option.selected||(this.option.selected=[]),this.option.selected.includes(e)||this.option.selected.push(e)},updateKeyFlags(e,t){switch(e){case 16:this.isShiftPressed=t,t&&this.pushSelected("shift");break;case 17:t&&this.pushSelected("command"),this.isCtrlPressed=t;break;case 18:t&&this.pushSelected("alt"),this.isAltPressed=t}},returnKey(e){if("Meta"==e)return'<span class="uip-command-icon uip-text-muted"></span>';if("Alt"==e)return'<span class="uip-alt-icon uip-text-muted"></span>';if("Shift"==e)return'<span class="uip-shift-icon uip-text-muted"></span>';if("Control"==e)return'<span class="uip-icon uip-text-muted">keyboard_control_key</span>';if("Backspace"==e)return'<span class="uip-icon uip-text-muted">backspace</span>';if(this.shortcutKeys.includes(e)){return`<span class="uip-icon uip-text-muted">${this.shortcutKeysIcons.find(t=>t.key==e).icon}</span>`}return`<span class="uip-text-muted uip-text-uppercase" style="line-height: 16px;font-size: 11px;">${e}</span>`},renderKeyShortCut(e){const t=["Enter"," ","ArrowLeft","ArrowUp","ArrowRight","ArrowDown"],i=[{key:"Enter",icon:"keyboard_return"},{key:" ",icon:"space_bar"},{key:"ArrowLeft",icon:"keyboard_arrow_left"},{key:"ArrowUp",icon:"keyboard_arrow_up"},{key:"ArrowRight",icon:"keyboard_arrow_right"},{key:"ArrowDown",icon:"keyboard_arrow_down"}];let s="";for(let n of e)if("Meta"==n)s+='<span class="uip-command-icon uip-text-muted"></span>';else if("Alt"==n)s+='<span class="uip-alt-icon uip-text-muted"></span>';else if("Shift"==n)s+='<span class="uip-shift-icon uip-text-muted"></span>';else if("Control"==n)s+='<span class="uip-icon uip-text-muted">keyboard_control_key</span>';else if("Backspace"==n)s+='<span class="uip-icon uip-text-muted">backspace</span>';else if(t.includes(n)){s+=`<span class="uip-icon uip-text-muted">${i.find(e=>e.key==n).icon}</span>`}else s+=`<span class="uip-text-muted uip-text-uppercase" style="line-height: 16px;font-size: 11px;">${n}</span>`;return s}},template:'\n    <div class="uip-flex uip-flex-column uip-row-gap-xs uip-w-100p">\n      \n      <toggle-switch :options="enabledOptions" :activeValue="option.enabled" :returnValue="function(data){ option.enabled = data}"></toggle-switch>\n        \n      \x3c!--Shortcut area --\x3e\n      <div v-if="option.enabled" class="uip-scale-in-top uip-flex uip-flex-column uip-row-gap-xs uip-flex-start">\n        <div class="uip-text-s uip-text-muted">{{strings.pressShortcut}}</div>\n        <input type="text" ref="shortcutInput" class="uip-input" @keydown="logKeyDown" @keyup="logKeyUp">\n        <div class="uip-flex uip-flex-row uip-gap-xs uip-flex-center">\n          <div v-if="option.selected && option.selected.length > 0" class="uip-flex uip-flex-row uip-padding-left-xxxs uip-padding-right-xxxs uip-border uip-border-round uip-text-s uip-flex-row uip-inline-flex uip-flex-center" v-html="renderKeyShortCut(option.selected)">\n          </div>\n          <div v-if="option.selected && option.selected.length > 0" class="uip-button-default uip-icon uip-border-rounder uip-padding-xxs uip-link-muted" @click="option.selected = []"><span class="uip-icon">close</span></div>\n          \n        </div>\n      </div>\n      \x3c!--End shortcut area--\x3e\n      <div v-if="option.enabled">\n        <div class="uip-margin-bottom-xxs uip-text-s uip-text-muted">{{strings.displayShortcut}}</div>\n        \n        <toggle-switch :options="showHide" :activeValue="option.display" :returnValue="function(data){ option.display = data}"></toggle-switch>\n      </div>\n    </div>'};