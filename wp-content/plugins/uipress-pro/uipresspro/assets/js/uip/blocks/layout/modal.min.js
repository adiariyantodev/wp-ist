const{__:__,_x:_x,_n:_n,_nx:_nx}=wp.i18n;export default{props:{display:String,name:String,block:Object},data(){return{loading:!0,dynamics:this.uipApp.data.dynamicOptions,shortCut:[],pressedKeys:!1}},created(){this.mountListeners(),this.mountShortcut()},beforeUnmount(){document.removeEventListener("uipress/app/page/load/finish",this.handlePageChange),window.removeEventListener("keydown",this.handleKeyDown),window.removeEventListener("keyup",this.handleKeyUp)},computed:{closeOnPageChange(){let e=this.get_block_option(this.block,"block","closeOnPageChange");return!!e&&(this.isObject(e)?!!e.value:e)},returnIcon(){let e=this.get_block_option(this.block,"block","iconSelect");return e?this.isObject(e)?e.value?e.value:"":e:""},returnTitle(){const e=this.get_block_option(this.block,"block","modalTitle",!0);return e?this.isObject(e)?e.string?e.string:"":e:""},returnText(){const e=this.get_block_option(this.block,"block","buttonText",!0);return e?this.isObject(e)?e.string?e.string:"":e:""},getShortcut(){const e=this.getShortcutValue;if(e)return this.renderKeyShortCut(e)},getShortcutValue(){const e=this.get_block_option(this.block,"block","keyboardShortcut");if(this.isObject(e)){if(!e.enabled||!e.display||!e.selected)return!1;if(!(e.selected.length<1))return e.selected}},returnClasses(){const e=this.get_block_option(this.block,"block","iconPosition");if(e)return this.isObject(e)||"right"!=e?e.value&&"right"==e.value?"uip-flex-reverse":void 0:"uip-flex-reverse"}},methods:{mountListeners(){document.addEventListener("uipress/app/page/load/finish",this.handlePageChange)},mountShortcut(){this.getShortcutValue&&(this.pressedKeys=new Set,this.shortcut=[...this.getShortcutValue],window.addEventListener("keydown",this.handleKeyDown),window.addEventListener("keyup",this.handleKeyUp))},handleKeyDown(e){this.pressedKeys.add(e.key),this.shortcut.every(e=>this.pressedKeys.has(e))&&this.$refs.modal.open()},handleKeyUp(){this.pressedKeys.clear()},handlePageChange(){this.closeOnPageChange&&this.$refs.modal.close()},renderKeyShortCut(e){const t=["Enter"," ","ArrowLeft","ArrowUp","ArrowRight","ArrowDown"],n=[{key:"Enter",icon:"keyboard_return"},{key:" ",icon:"space_bar"},{key:"ArrowLeft",icon:"keyboard_arrow_left"},{key:"ArrowUp",icon:"keyboard_arrow_up"},{key:"ArrowRight",icon:"keyboard_arrow_right"},{key:"ArrowDown",icon:"keyboard_arrow_down"}];let s="";for(let i of e)if("Meta"==i)s+='<span class="uip-command-icon uip-text-muted"></span>';else if("Alt"==i)s+='<span class="uip-alt-icon uip-text-muted"></span>';else if("Shift"==i)s+='<span class="uip-shift-icon uip-text-muted"></span>';else if("Control"==i)s+='<span class="uip-icon uip-text-muted">keyboard_control_key</span>';else if("Backspace"==i)s+='<span class="uip-icon uip-text-muted">backspace</span>';else if(t.includes(i)){s+=`<span class="uip-icon uip-text-muted">${n.find(e=>e.key==i).icon}</span>`}else s+=`<span class="uip-text-muted uip-text-uppercase" style="line-height: 16px;font-size: 11px;">${i}</span>`;return s},maybeBlur(){this.$refs.trigger&&this.$refs.trigger.blur()},returnPublicMethods:()=>["show","close"],show(){this.$refs.modal.open()},close(){this.$refs.modal.close()}},template:'\n  \n        <button ref="trigger" class="uip-button-default uip-flex uip-gap-xxs uip-flex-center uip-panel-trigger"\n        :class="returnClasses" @click="maybeBlur();$refs.modal.open()">\n        \n          <span class="uip-icon" v-if="returnIcon">{{returnIcon}}</span>\n          <span class="uip-flex-grow" v-if="returnText != \'\'">{{returnText}}</span>\n          <div v-if="getShortcut" class="uip-flex uip-flex-row uip-padding-left-xxxs uip-padding-right-xxxs uip-border uip-border-round uip-text-s uip-flex-row uip-inline-flex uip-flex-center" v-html="getShortcut">\n          </div>\n          \n          <uipModal ref="modal">\n          \n            <uip-content-area :content="block.content" :returnData="(data)=>block.content = data"/>\n              \n          </uipModal>\n          \n        </button>\n        \n        '};